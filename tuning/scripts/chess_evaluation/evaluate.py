from .types import EvaluationParams, ChessPosition

class ChessEvaluator:
    """Python implementation of the chess evaluation function"""
    
    def __init__(self, params: EvaluationParams = None):
        self.params = params or EvaluationParams()
        
        # phase weights for game phase calculation
        self.phase_weights = [0, 1, 1, 2, 4, 0]  # P, N, B, R, Q, K
        self.max_phase = (1 * 2 + 1 * 2 + 2 * 2 + 4 * 1) * 2  # 24
        
        # opening PST
        self.pst_opening = {
            'P': [0, 0, 0, 0, 0, 0, 0, 0,
                  5, 10, 10, -20, -20, 10, 10, 5,
                  10, 10, 20, 30, 30, 20, 10, 10,
                  5, 5, 10, 50, 50, 10, 5, 5,
                  0, 0, 0, 60, 60, 0, 0, 0,
                  5, -5, -10, 20, 20, -10, -5, 5,
                  5, 10, 10, -20, -20, 10, 10, 5,
                  0, 0, 0, 0, 0, 0, 0, 0],
            
            'N': [-50, -40, -30, -30, -30, -30, -40, -50,
                  -40, -20, 0, 0, 0, 0, -20, -40,
                  -30, 0, 10, 15, 15, 10, 0, -30,
                  -30, 5, 15, 20, 20, 15, 5, -30,
                  -30, 0, 15, 20, 20, 15, 0, -30,
                  -30, 5, 10, 15, 15, 10, 5, -30,
                  -40, -20, 0, 5, 5, 0, -20, -40,
                  -50, -40, -30, -30, -30, -30, -40, -50],
            
            'B': [-20, -10, -10, -10, -10, -10, -10, -20,
                  -10, 0, 0, 0, 0, 0, 0, -10,
                  -10, 0, 5, 10, 10, 5, 0, -10,
                  -10, 5, 5, 10, 10, 5, 5, -10,
                  -10, 0, 10, 10, 10, 10, 0, -10,
                  -10, 10, 10, 10, 10, 10, 10, -10,
                  -10, 5, 0, 0, 0, 0, 5, -10,
                  -20, -10, -10, -10, -10, -10, -10, -20],
            
            'R': [0, 0, 0, 0, 0, 0, 0, 0,
                  -5, 0, 0, 0, 0, 0, 0, -5,
                  -5, 0, 0, 0, 0, 0, 0, -5,
                  -5, 0, 0, 0, 0, 0, 0, -5,
                  -5, 0, 0, 0, 0, 0, 0, -5,
                  -5, 0, 0, 0, 0, 0, 0, -5,
                  5, 10, 10, 10, 10, 10, 10, 5,
                  0, 0, 0, 5, 5, 0, 0, 0],
            
            'Q': [-20, -10, -10, -5, -5, -10, -10, -20,
                  -10, 0, 0, 0, 0, 0, 0, -10,
                  -10, 0, 5, 5, 5, 5, 0, -10,
                  -5, 0, 5, 5, 5, 5, 0, -5,
                  0, 0, 5, 5, 5, 5, 0, -5,
                  -10, 5, 5, 5, 5, 5, 0, -10,
                  -10, 0, 5, 0, 0, 0, 0, -10,
                  -20, -10, -10, -5, -5, -10, -10, -20],
            
            'K': [20, 30, 10, 0, 0, 10, 30, 20,
                  20, 20, 0, 0, 0, 0, 20, 20,
                  -10, -20, -20, -20, -20, -20, -20, -10,
                  -20, -30, -30, -40, -40, -30, -30, -20,
                  -30, -40, -40, -50, -50, -40, -40, -30,
                  -30, -40, -40, -50, -50, -40, -40, -30,
                  -30, -40, -40, -50, -50, -40, -40, -30,
                  -30, -40, -40, -50, -50, -40, -40, -30]
        }
        
        # endgame PST
        self.pst_endgame = {
            'P': [0, 0, 0, 0, 0, 0, 0, 0,
                  5, 10, 10, -20, -20, 10, 10, 5,
                  5, -5, -10, 0, 0, -10, -5, 5,
                  0, 0, 0, 20, 20, 0, 0, 0,
                  5, 5, 10, 25, 25, 10, 5, 5,
                  10, 10, 20, 30, 30, 20, 10, 10,
                  50, 50, 50, 50, 50, 50, 50, 50,
                  0, 0, 0, 0, 0, 0, 0, 0],
            
            'N': [-50, -40, -30, -30, -30, -30, -40, -50,
                  -40, -20, 0, 0, 0, 0, -20, -40,
                  -30, 0, 10, 15, 15, 10, 0, -30,
                  -30, 5, 15, 20, 20, 15, 5, -30,
                  -30, 0, 15, 20, 20, 15, 0, -30,
                  -30, 5, 10, 15, 15, 10, 5, -30,
                  -40, -20, 0, 5, 5, 0, -20, -40,
                  -50, -40, -30, -30, -30, -30, -40, -50],
            
            'B': [-20, -10, -10, -10, -10, -10, -10, -20,
                  -10, 0, 0, 0, 0, 0, 0, -10,
                  -10, 0, 5, 10, 10, 5, 0, -10,
                  -10, 5, 5, 10, 10, 5, 5, -10,
                  -10, 0, 10, 10, 10, 10, 0, -10,
                  -10, 10, 10, 10, 10, 10, 10, -10,
                  -10, 5, 0, 0, 0, 0, 5, -10,
                  -20, -10, -10, -10, -10, -10, -10, -20],
            
            'R': [0, 0, 5, 10, 10, 5, 0, 0,
                  0, 0, 5, 10, 10, 5, 0, 0,
                  0, 0, 5, 10, 10, 5, 0, 0,
                  0, 0, 5, 10, 10, 5, 0, 0,
                  0, 0, 5, 10, 10, 5, 0, 0,
                  0, 0, 5, 10, 10, 5, 0, 0,
                  25, 25, 25, 25, 25, 25, 25, 25,
                  0, 0, 5, 10, 10, 5, 0, 0],
            
            'Q': [-20, -10, -10, -5, -5, -10, -10, -20,
                  -10, 0, 0, 0, 0, 0, 0, -10,
                  -10, 0, 5, 5, 5, 5, 0, -10,
                  -5, 0, 5, 5, 5, 5, 0, -5,
                  0, 0, 5, 5, 5, 5, 0, -5,
                  -10, 5, 5, 5, 5, 5, 0, -10,
                  -10, 0, 5, 0, 0, 0, 0, -10,
                  -20, -10, -10, -5, -5, -10, -10, -20],
            
            'K': [-50, -40, -30, -20, -20, -30, -40, -50,
                  -30, -20, -10, 0, 0, -10, -20, -30,
                  -30, -10, 20, 30, 30, 20, -10, -30,
                  -30, -10, 30, 40, 40, 30, -10, -30,
                  -30, -10, 30, 40, 40, 30, -10, -30,
                  -30, -10, 20, 30, 30, 20, -10, -30,
                  -30, -30, 0, 0, 0, 0, -30, -30,
                  -50, -30, -30, -30, -30, -30, -30, -50]
        }